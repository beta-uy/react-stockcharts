{"version":3,"sources":["../../../../src/lib/coordinates/AxisXCursor.js"],"names":["React","Component","PropTypes","GenericComponent","getMouseCanvas","hexToRGBA","isDefined","isNotDefined","strokeDashTypes","getStrokeDasharray","AxisXCursor","props","renderSVG","bind","drawOnCanvas","ctx","moreProps","line","helper","context","margin","ratio","originX","left","originY","top","save","setTransform","scale","translate","dashArray","strokeDasharray","split","map","d","strokeStyle","stroke","opacity","setLineDash","beginPath","moveTo","x1","y1","lineTo","x2","y2","lineWidth","strokeWidth","restore","className","rest","propTypes","string","oneOf","contextTypes","object","isRequired","number","customX","xScale","xAccessor","currentItem","mouseXY","snapX","x","Math","round","defaultProps","show","height","line2"],"mappings":"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","file":"AxisXCursor.js","sourcesContent":["// Based on: https://github.com/rrag/react-stockcharts/blob/master/src/lib/coordinates/AxisXCursor.js\n\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport GenericComponent, { getMouseCanvas } from \"../GenericComponent\";\n\nimport {\n  hexToRGBA,\n  isDefined,\n  isNotDefined,\n  strokeDashTypes,\n  getStrokeDasharray,\n} from \"../utils\";\n\nclass AxisXCursor extends Component {\n  constructor(props) {\n    super(props);\n    this.renderSVG = this.renderSVG.bind(this);\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n  }\n  drawOnCanvas(ctx, moreProps) {\n    const line = helper(this.props, moreProps);\n\n    if (isDefined(line)) {\n      const { margin, ratio } = this.context;\n      const originX = 0.5 * ratio + margin.left;\n      const originY = 0.5 * ratio + margin.top;\n\n      ctx.save();\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.scale(ratio, ratio);\n\n      ctx.translate(originX, originY);\n\n      const dashArray = getStrokeDasharray(line.strokeDasharray)\n        .split(\",\")\n        .map(d => +d);\n\n      ctx.strokeStyle = hexToRGBA(line.stroke, line.opacity);\n      ctx.setLineDash(dashArray);\n      ctx.beginPath();\n      ctx.moveTo(line.x1, line.y1);\n      ctx.lineTo(line.x2, line.y2);\n      ctx.lineWidth = line.strokeWidth;\n      ctx.stroke();\n\n      ctx.restore();\n    }\n  }\n  renderSVG(moreProps) {\n    const { className } = this.props;\n    const line = helper(this.props, moreProps);\n\n    if (isNotDefined(line)) return null;\n\n    const { strokeDasharray, ...rest } = this.props;\n\n    return (\n      <g className={`react-stockcharts-crosshair ${className}`}>\n        <line {...rest} strokeDasharray={getStrokeDasharray(strokeDasharray)} />\n      </g>\n    );\n  }\n  render() {\n    return (\n      <GenericComponent\n        svgDraw={this.renderSVG}\n        clip={false}\n        canvasDraw={this.drawOnCanvas}\n        canvasToDraw={getMouseCanvas}\n        drawOn={[\"mousemove\", \"pan\", \"drag\"]}\n      />\n    );\n  }\n}\n\nAxisXCursor.propTypes = {\n  className: PropTypes.string,\n  strokeDasharray: PropTypes.oneOf(strokeDashTypes),\n};\n\nAxisXCursor.contextTypes = {\n  margin: PropTypes.object.isRequired,\n  ratio: PropTypes.number.isRequired,\n  // xScale for getting update event upon pan end, this is needed to get past the PureComponent shouldComponentUpdate\n  // xScale: PropTypes.func.isRequired,\n};\n\nfunction customX(props, moreProps) {\n  const { xScale, xAccessor, currentItem, mouseXY } = moreProps;\n  const { snapX } = props;\n  const x = snapX ? Math.round(xScale(xAccessor(currentItem))) : mouseXY[0];\n  return x;\n}\n\nAxisXCursor.defaultProps = {\n  stroke: \"#0f0\",\n  opacity: 1,\n  strokeDasharray: \"none\",\n  snapX: true,\n  customX,\n};\n\nfunction helper(props, moreProps) {\n  const { currentItem, show, height } = moreProps;\n\n  const { customX, stroke, opacity, strokeDasharray, strokeWidth } = props;\n\n  if (!show || isNotDefined(currentItem)) return null;\n\n  const x = customX(props, moreProps);\n\n  const line2 = {\n    x1: x,\n    x2: x,\n    y1: 0,\n    y2: height,\n    stroke,\n    strokeWidth,\n    strokeDasharray,\n    opacity,\n  };\n  return line2;\n}\n\nexport default AxisXCursor;\n"]}